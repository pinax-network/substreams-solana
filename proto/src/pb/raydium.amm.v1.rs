// @generated
// This file is @generated by prost-build.
/// -----------------------------------------------------------------------------
/// Top-level containers
/// -----------------------------------------------------------------------------
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Fee-payer account address
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    /// Signers of the tx
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Lamports paid
    #[prost(uint64, tag="4")]
    pub fee: u64,
    /// CU used
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    /// Executed instructions
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
    /// Emitted logs
    #[prost(message, repeated, tag="7")]
    pub logs: ::prost::alloc::vec::Vec<Log>,
}
/// -----------------------------------------------------------------------------
/// Instruction + typed payloads
/// -----------------------------------------------------------------------------
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="3, 4")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="3")]
        SwapBaseIn(super::SwapBaseInInstruction),
        #[prost(message, tag="4")]
        SwapBaseOut(super::SwapBaseOutInstruction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    /// Call stack depth of the log
    #[prost(uint32, tag="2")]
    pub invoke_depth: u32,
    #[prost(oneof="log::Log", tags="3, 4")]
    pub log: ::core::option::Option<log::Log>,
}
/// Nested message and enum types in `Log`.
pub mod log {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Log {
        /// AMM swap log
        #[prost(message, tag="3")]
        SwapBaseIn(super::SwapBaseInLog),
        /// AMM swap log
        #[prost(message, tag="4")]
        SwapBaseOut(super::SwapBaseOutLog),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapAccounts {
    /// Token program (usually SPL Token)
    #[prost(bytes="vec", tag="1")]
    pub token_program: ::prost::alloc::vec::Vec<u8>,
    /// AMM pool account (Raydium V4 liquidity-state)
    #[prost(bytes="vec", tag="2")]
    pub amm_id: ::prost::alloc::vec::Vec<u8>,
    /// AMM authority PDA
    #[prost(bytes="vec", tag="3")]
    pub amm_authority: ::prost::alloc::vec::Vec<u8>,
    /// AMM open-orders
    #[prost(bytes="vec", tag="4")]
    pub amm_open_orders: ::prost::alloc::vec::Vec<u8>,
    /// AMM target-orders
    #[prost(bytes="vec", tag="5")]
    pub pool_coin_token_account: ::prost::alloc::vec::Vec<u8>,
    /// AMM coin vault (base-token vault)
    #[prost(bytes="vec", tag="6")]
    pub pool_pc_token_account: ::prost::alloc::vec::Vec<u8>,
    /// AMM pc vault (quote-token vault)
    #[prost(bytes="vec", tag="7")]
    pub serum_program_id: ::prost::alloc::vec::Vec<u8>,
    /// OpenBook (or Serum) DEX program
    #[prost(bytes="vec", tag="8")]
    pub serum_market: ::prost::alloc::vec::Vec<u8>,
    /// Market account
    #[prost(bytes="vec", tag="9")]
    pub serum_bids: ::prost::alloc::vec::Vec<u8>,
    /// Market bids slab
    #[prost(bytes="vec", tag="10")]
    pub serum_asks: ::prost::alloc::vec::Vec<u8>,
    /// Market asks slab
    #[prost(bytes="vec", tag="11")]
    pub serum_event_queue: ::prost::alloc::vec::Vec<u8>,
    /// Market event queue
    #[prost(bytes="vec", tag="12")]
    pub serum_coin_vault_account: ::prost::alloc::vec::Vec<u8>,
    /// Market pc vault (quote)
    #[prost(bytes="vec", tag="13")]
    pub serum_pc_vault: ::prost::alloc::vec::Vec<u8>,
    /// Market vault-signer PDA
    #[prost(bytes="vec", tag="14")]
    pub serum_vault_signer: ::prost::alloc::vec::Vec<u8>,
    /// User source ATA (base token)
    #[prost(bytes="vec", tag="15")]
    pub user_source_token_account: ::prost::alloc::vec::Vec<u8>,
    /// User destination ATA (quote token)
    #[prost(bytes="vec", tag="16")]
    pub user_dest_token_account: ::prost::alloc::vec::Vec<u8>,
    /// User wallet (authority & fee-payer)
    #[prost(bytes="vec", tag="17")]
    pub user_owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapBaseInInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<SwapAccounts>,
    #[prost(uint64, tag="2")]
    pub amount_in: u64,
    #[prost(uint64, tag="3")]
    pub minimum_amount_out: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapBaseOutInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<SwapAccounts>,
    #[prost(uint64, tag="2")]
    pub max_amount_in: u64,
    #[prost(uint64, tag="3")]
    pub amount_out: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapBaseInLog {
    #[prost(uint64, tag="1")]
    pub amount_in: u64,
    #[prost(uint64, tag="2")]
    pub minimum_out: u64,
    #[prost(uint64, tag="3")]
    pub direction: u64,
    #[prost(uint64, tag="4")]
    pub user_source: u64,
    #[prost(uint64, tag="5")]
    pub pool_coin: u64,
    #[prost(uint64, tag="6")]
    pub pool_pc: u64,
    #[prost(uint64, tag="7")]
    pub out_amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapBaseOutLog {
    #[prost(uint64, tag="1")]
    pub max_in: u64,
    #[prost(uint64, tag="2")]
    pub amount_out: u64,
    #[prost(uint64, tag="3")]
    pub direction: u64,
    #[prost(uint64, tag="4")]
    pub user_source: u64,
    #[prost(uint64, tag="5")]
    pub pool_coin: u64,
    #[prost(uint64, tag="6")]
    pub pool_pc: u64,
    #[prost(uint64, tag="7")]
    pub deduct_in: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitLog {
    #[prost(uint32, tag="1")]
    pub pc_decimals: u32,
    #[prost(uint32, tag="2")]
    pub coin_decimals: u32,
    #[prost(uint64, tag="3")]
    pub pc_lot_size: u64,
    #[prost(uint64, tag="4")]
    pub coin_lot_size: u64,
    #[prost(uint64, tag="5")]
    pub pc_amount: u64,
    #[prost(uint64, tag="6")]
    pub coin_amount: u64,
    /// 32-byte Pubkey
    #[prost(bytes="vec", tag="7")]
    pub market: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepositLog {
    #[prost(uint64, tag="1")]
    pub max_coin: u64,
    #[prost(uint64, tag="2")]
    pub max_pc: u64,
    #[prost(uint64, tag="3")]
    pub base: u64,
    #[prost(uint64, tag="4")]
    pub pool_coin: u64,
    #[prost(uint64, tag="5")]
    pub pool_pc: u64,
    #[prost(uint64, tag="6")]
    pub pool_lp: u64,
    /// UInt128 as decimal string
    #[prost(string, tag="7")]
    pub calc_pnl_x: ::prost::alloc::string::String,
    /// UInt128 as decimal string
    #[prost(string, tag="8")]
    pub calc_pnl_y: ::prost::alloc::string::String,
    #[prost(uint64, tag="9")]
    pub deduct_coin: u64,
    #[prost(uint64, tag="10")]
    pub deduct_pc: u64,
    #[prost(uint64, tag="11")]
    pub mint_lp: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WithdrawLog {
    #[prost(uint64, tag="1")]
    pub withdraw_lp: u64,
    #[prost(uint64, tag="2")]
    pub user_lp: u64,
    #[prost(uint64, tag="3")]
    pub pool_coin: u64,
    #[prost(uint64, tag="4")]
    pub pool_pc: u64,
    #[prost(uint64, tag="5")]
    pub pool_lp: u64,
    /// UInt128 as decimal string
    #[prost(string, tag="6")]
    pub calc_pnl_x: ::prost::alloc::string::String,
    /// UInt128 as decimal string
    #[prost(string, tag="7")]
    pub calc_pnl_y: ::prost::alloc::string::String,
    #[prost(uint64, tag="8")]
    pub out_coin: u64,
    #[prost(uint64, tag="9")]
    pub out_pc: u64,
}
// @@protoc_insertion_point(module)
