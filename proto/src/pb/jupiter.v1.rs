// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="2")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="3")]
    pub compute_units_consumed: u64,
    #[prost(message, repeated, tag="4")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="10, 11")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="10")]
        SwapEvent(super::SwapEvent),
        #[prost(message, tag="11")]
        FeeEvent(super::FeeEvent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapEvent {
    /// AMM account address.
    #[prost(bytes="vec", tag="1")]
    pub amm: ::prost::alloc::vec::Vec<u8>,
    /// Input token mint address.
    #[prost(bytes="vec", tag="2")]
    pub input_mint: ::prost::alloc::vec::Vec<u8>,
    /// Amount of input tokens swapped.
    #[prost(uint64, tag="3")]
    pub input_amount: u64,
    /// Output token mint address.
    #[prost(bytes="vec", tag="4")]
    pub output_mint: ::prost::alloc::vec::Vec<u8>,
    /// Amount of output tokens received.
    #[prost(uint64, tag="5")]
    pub output_amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeeEvent {
    /// Account that collected the fee.
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    /// Token mint address for the fee.
    #[prost(bytes="vec", tag="2")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// Amount of fee collected.
    #[prost(uint64, tag="3")]
    pub amount: u64,
}
// @@protoc_insertion_point(module)
