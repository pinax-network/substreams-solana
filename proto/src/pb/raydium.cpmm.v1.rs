// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, tag="4")]
    pub fee: u64,
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
    #[prost(message, repeated, tag="7")]
    pub logs: ::prost::alloc::vec::Vec<Log>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="3, 4")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="3")]
        SwapBaseInput(super::SwapBaseInputInstruction),
        #[prost(message, tag="4")]
        SwapBaseOutput(super::SwapBaseOutputInstruction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapAccounts {
    #[prost(bytes="vec", tag="1")]
    pub payer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub amm_config: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="4")]
    pub pool_state: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="5")]
    pub input_token_account: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub output_token_account: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub input_vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub output_vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="9")]
    pub input_token_program: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="10")]
    pub output_token_program: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub input_token_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="12")]
    pub output_token_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="13")]
    pub observation_state: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapBaseInputInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<SwapAccounts>,
    #[prost(uint64, tag="2")]
    pub amount_in: u64,
    #[prost(uint64, tag="3")]
    pub minimum_amount_out: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapBaseOutputInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<SwapAccounts>,
    #[prost(uint64, tag="2")]
    pub max_amount_in: u64,
    #[prost(uint64, tag="3")]
    pub amount_out: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub invoke_depth: u32,
    #[prost(oneof="log::Log", tags="3, 4")]
    pub log: ::core::option::Option<log::Log>,
}
/// Nested message and enum types in `Log`.
pub mod log {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Log {
        #[prost(message, tag="3")]
        Swap(super::SwapEvent),
        #[prost(message, tag="4")]
        LpChange(super::LpChangeEvent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapEvent {
    #[prost(bytes="vec", tag="1")]
    pub pool_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub input_vault_before: u64,
    #[prost(uint64, tag="3")]
    pub output_vault_before: u64,
    #[prost(uint64, tag="4")]
    pub input_amount: u64,
    #[prost(uint64, tag="5")]
    pub output_amount: u64,
    #[prost(uint64, tag="6")]
    pub input_transfer_fee: u64,
    #[prost(uint64, tag="7")]
    pub output_transfer_fee: u64,
    #[prost(bool, tag="8")]
    pub base_input: bool,
    #[prost(bytes="vec", optional, tag="9")]
    pub input_mint: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", optional, tag="10")]
    pub output_mint: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, optional, tag="11")]
    pub trade_fee: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="12")]
    pub creator_fee: ::core::option::Option<u64>,
    #[prost(bool, optional, tag="13")]
    pub creator_fee_on_input: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LpChangeEvent {
    #[prost(bytes="vec", tag="1")]
    pub pool_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub lp_amount_before: u64,
    #[prost(uint64, tag="3")]
    pub token_0_vault_before: u64,
    #[prost(uint64, tag="4")]
    pub token_1_vault_before: u64,
    #[prost(uint64, tag="5")]
    pub token_0_amount: u64,
    #[prost(uint64, tag="6")]
    pub token_1_amount: u64,
    #[prost(uint64, tag="7")]
    pub token_0_transfer_fee: u64,
    #[prost(uint64, tag="8")]
    pub token_1_transfer_fee: u64,
    #[prost(uint32, tag="9")]
    pub change_type: u32,
}
// @@protoc_insertion_point(module)
