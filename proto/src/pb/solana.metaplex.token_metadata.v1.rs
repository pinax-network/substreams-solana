// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Fee payer account address.
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    /// Signers of the transaction.
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="4")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    /// Instructions executed in this transaction.
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    /// Indicates if this instruction is a root instruction.
    #[prost(bool, tag="3")]
    pub is_root: bool,
    #[prost(oneof="instruction::Instruction", tags="10, 11")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="10")]
        CreateMetadataAccountV3(super::CreateMetadataAccountV3),
        #[prost(message, tag="11")]
        UpdateMetadataAccountV2(super::UpdateMetadataAccountV2),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateMetadataAccountV3 {
    /// accounts
    ///
    /// Metadata account address
    #[prost(bytes="vec", tag="1")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
    /// Mint account address
    #[prost(bytes="vec", tag="2")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// Mint authority account address
    #[prost(bytes="vec", tag="3")]
    pub mint_authority: ::prost::alloc::vec::Vec<u8>,
    /// Payer account address
    #[prost(bytes="vec", tag="4")]
    pub payer: ::prost::alloc::vec::Vec<u8>,
    /// Update authority account address
    #[prost(bytes="vec", tag="5")]
    pub update_authority: ::prost::alloc::vec::Vec<u8>,
    /// instruction data
    ///
    /// Name of the token metadata
    #[prost(string, tag="6")]
    pub name: ::prost::alloc::string::String,
    /// Symbol of the token metadata
    #[prost(string, tag="7")]
    pub symbol: ::prost::alloc::string::String,
    /// URI of the token metadata
    #[prost(string, tag="8")]
    pub uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMetadataAccountV2 {
    /// accounts
    ///
    /// Metadata account address
    #[prost(bytes="vec", tag="1")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
    /// Update authority account address
    #[prost(bytes="vec", tag="2")]
    pub update_authority: ::prost::alloc::vec::Vec<u8>,
    /// instruction data
    ///
    /// Name of the token metadata
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    /// Symbol of the token metadata
    #[prost(string, tag="4")]
    pub symbol: ::prost::alloc::string::String,
    /// URI of the token metadata
    #[prost(string, tag="5")]
    pub uri: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
