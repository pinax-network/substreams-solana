// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="2")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="3")]
    pub compute_units_consumed: u64,
    #[prost(message, repeated, tag="4")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="10, 11, 12, 13, 14, 15, 16")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="10")]
        Buy(super::BuyInstruction),
        #[prost(message, tag="11")]
        Sell(super::SellInstruction),
        #[prost(message, tag="12")]
        Create(super::CreateInstruction),
        #[prost(message, tag="13")]
        SetParams(super::SetParamsInstruction),
        #[prost(message, tag="14")]
        Initialize(super::InitializeInstruction),
        #[prost(message, tag="15")]
        Withdraw(super::WithdrawInstruction),
        #[prost(message, tag="16")]
        Trade(super::TradeEvent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InitializeInstruction {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WithdrawInstruction {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<TradeAccounts>,
    #[prost(uint64, tag="2")]
    pub amount: u64,
    #[prost(uint64, tag="3")]
    pub max_sol_cost: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SellInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<TradeAccounts>,
    #[prost(uint64, tag="2")]
    pub amount: u64,
    #[prost(uint64, tag="3")]
    pub min_sol_output: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeAccounts {
    /// Global state account.
    #[prost(bytes="vec", tag="1")]
    pub global: ::prost::alloc::vec::Vec<u8>,
    /// Account that will collect protocol fees.
    #[prost(bytes="vec", tag="2")]
    pub fee_recipient: ::prost::alloc::vec::Vec<u8>,
    /// SPL-Token mint address.
    #[prost(bytes="vec", tag="3")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// Bonding-curve configuration account.
    #[prost(bytes="vec", tag="4")]
    pub bonding_curve: ::prost::alloc::vec::Vec<u8>,
    /// Vault holding the curve’s token reserve.
    #[prost(bytes="vec", tag="5")]
    pub associated_bonding_curve: ::prost::alloc::vec::Vec<u8>,
    /// User state (per-user data).
    #[prost(bytes="vec", tag="6")]
    pub associated_user: ::prost::alloc::vec::Vec<u8>,
    /// Buyer wallet (fee payer).
    #[prost(bytes="vec", tag="7")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    /// bytes system_program = 8; // System program ID.
    /// bytes token_program = 9; // SPL-Token program ID.
    ///
    /// Vault for creator fees.
    #[prost(bytes="vec", tag="10")]
    pub creator_vault: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstruction {
    /// UTF-8 name of the token pool.
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Ticker symbol (≤ 10 UTF-8 bytes).
    #[prost(string, tag="2")]
    pub symbol: ::prost::alloc::string::String,
    /// URI pointing to off-chain JSON metadata.
    #[prost(string, tag="3")]
    pub uri: ::prost::alloc::string::String,
    /// Pool creator (receives creator fees).
    #[prost(bytes="vec", tag="4")]
    pub creator: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetParamsInstruction {
    /// Account that will collect protocol fees going forward.
    #[prost(bytes="vec", tag="1")]
    pub fee_recipient: ::prost::alloc::vec::Vec<u8>,
    /// Virtual token reserve used in price calculation.
    #[prost(uint64, tag="2")]
    pub initial_virtual_token_reserves: u64,
    /// Virtual SOL reserve used in price calculation.
    #[prost(uint64, tag="3")]
    pub initial_virtual_sol_reserves: u64,
    /// Real SPL-Token balance present at pool creation (for reference).
    #[prost(uint64, tag="4")]
    pub initial_real_token_reserves: u64,
    /// Total supply of the SPL-Token.
    #[prost(uint64, tag="5")]
    pub token_total_supply: u64,
    /// Protocol fee charged on each trade (basis points, i.e. 1 bp = 0.01 %).
    #[prost(uint64, tag="6")]
    pub fee_basis_points: u64,
}
/// One emitted trade (buy or sell) on a Pump.fun bonding curve.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeEvent {
    /// 32-byte SPL-Token mint address.
    #[prost(bytes="vec", tag="1")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// Lamports moved (positive on buys, negative on sells).
    #[prost(uint64, tag="2")]
    pub sol_amount: u64,
    /// Token amount moved (positive on buys, negative on sells).
    #[prost(uint64, tag="3")]
    pub token_amount: u64,
    /// true = buy (SOL→SPL), false = sell.
    #[prost(bool, tag="4")]
    pub is_buy: bool,
    /// Trader’s wallet (32 bytes).
    #[prost(bytes="vec", tag="5")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    /// Unix-epoch seconds.
    #[prost(int64, tag="6")]
    pub timestamp: i64,
    #[prost(uint64, tag="7")]
    pub virtual_sol_reserves: u64,
    #[prost(uint64, tag="8")]
    pub virtual_token_reserves: u64,
    #[prost(uint64, tag="9")]
    pub real_sol_reserves: u64,
    #[prost(uint64, tag="10")]
    pub real_token_reserves: u64,
    /// Protocol-fee recipient (32 bytes).
    #[prost(bytes="vec", optional, tag="11")]
    pub fee_recipient: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// basis-points, 1 bp = 0.01 %
    #[prost(uint64, optional, tag="12")]
    pub fee_basis_points: ::core::option::Option<u64>,
    /// lamports
    #[prost(uint64, optional, tag="13")]
    pub fee: ::core::option::Option<u64>,
    /// Pool creator wallet (32 bytes).
    #[prost(bytes="vec", optional, tag="14")]
    pub creator: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, optional, tag="15")]
    pub creator_fee_basis_points: ::core::option::Option<u64>,
    /// lamports
    #[prost(uint64, optional, tag="16")]
    pub creator_fee: ::core::option::Option<u64>,
}
// @@protoc_insertion_point(module)
