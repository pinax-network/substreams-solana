// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag="2")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(oneof="instruction::Instruction", tags="1, 2, 3")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="1")]
        Buy(super::BuyInstruction),
        #[prost(message, tag="2")]
        Sell(super::SellInstruction),
        #[prost(message, tag="3")]
        Trade(super::TradeEvent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyInstruction {
    #[prost(uint64, tag="1")]
    pub amount: u64,
    #[prost(uint64, tag="2")]
    pub max_sol_cost: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SellInstruction {
    #[prost(uint64, tag="1")]
    pub amount: u64,
    #[prost(uint64, tag="2")]
    pub min_sol_output: u64,
}
/// One emitted trade (buy or sell) on a Pump.fun bonding curve.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeEvent {
    /// 32-byte SPL-Token mint address.
    #[prost(bytes="vec", tag="1")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// Lamports moved (positive on buys, negative on sells).
    #[prost(uint64, tag="2")]
    pub sol_amount: u64,
    /// Token amount moved (positive on buys, negative on sells).
    #[prost(uint64, tag="3")]
    pub token_amount: u64,
    /// true = buy (SOL→SPL), false = sell.
    #[prost(bool, tag="4")]
    pub is_buy: bool,
    /// Trader’s wallet (32 bytes).
    #[prost(bytes="vec", tag="5")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    /// Unix-epoch seconds.
    #[prost(int64, tag="6")]
    pub timestamp: i64,
    #[prost(uint64, tag="7")]
    pub virtual_sol_reserves: u64,
    #[prost(uint64, tag="8")]
    pub virtual_token_reserves: u64,
    #[prost(uint64, tag="9")]
    pub real_sol_reserves: u64,
    #[prost(uint64, tag="10")]
    pub real_token_reserves: u64,
    /// Protocol-fee recipient (32 bytes).
    #[prost(bytes="vec", tag="11")]
    pub fee_recipient: ::prost::alloc::vec::Vec<u8>,
    /// basis-points, 1 bp = 0.01 %
    #[prost(uint64, tag="12")]
    pub fee_basis_points: u64,
    /// lamports
    #[prost(uint64, tag="13")]
    pub fee: u64,
    /// Pool creator wallet (32 bytes).
    #[prost(bytes="vec", tag="14")]
    pub creator: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="15")]
    pub creator_fee_basis_points: u64,
    /// lamports
    #[prost(uint64, tag="16")]
    pub creator_fee: u64,
}
// @@protoc_insertion_point(module)
