// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Fee payer account address.
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    /// Signers of the transaction.
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="4")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    /// Instructions executed in this transaction.
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    /// Indicates if this instruction is a root instruction.
    #[prost(bool, tag="3")]
    pub is_root: bool,
    #[prost(oneof="instruction::Instruction", tags="10, 11, 12, 13, 14, 15, 16")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        /// <https://github.com/solana-program/token-2022>
        #[prost(message, tag="10")]
        Transfer(super::Transfer),
        #[prost(message, tag="11")]
        Mint(super::Transfer),
        #[prost(message, tag="12")]
        Burn(super::Transfer),
        #[prost(message, tag="13")]
        InitializeMint(super::InitializeMint),
        #[prost(message, tag="14")]
        InitializeAccount(super::InitializeAccount),
        #[prost(message, tag="15")]
        Approve(super::Approve),
        #[prost(message, tag="16")]
        Revoke(super::Revoke),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// -- authority --
    #[prost(bytes="vec", tag="1")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub destination: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="12")]
    pub amount: u64,
    /// SPL-2022
    #[prost(bytes="vec", optional, tag="13")]
    pub mint: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// uint8
    #[prost(uint32, optional, tag="14")]
    pub decimals: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializeMint {
    #[prost(bytes="vec", tag="1")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub mint_authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", optional, tag="3")]
    pub freeze_authority: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// uint8
    #[prost(uint32, tag="4")]
    pub decimals: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializeAccount {
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Approve {
    /// -- authority --
    #[prost(bytes="vec", tag="1")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", optional, tag="11")]
    pub mint: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", tag="12")]
    pub delegate: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="13")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="14")]
    pub amount: u64,
    /// uint8
    #[prost(uint32, optional, tag="15")]
    pub decimals: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Revoke {
    /// -- authority --
    #[prost(bytes="vec", tag="1")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
