// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Fee payer account address.
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    /// Signers of the transaction.
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="4")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    /// Instructions executed in this transaction.
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
    /// Native balances before the transaction.
    #[prost(message, repeated, tag="9")]
    pub pre_balances: ::prost::alloc::vec::Vec<Balance>,
    /// Native balances after the transaction.
    #[prost(message, repeated, tag="10")]
    pub post_balances: ::prost::alloc::vec::Vec<Balance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(bool, tag="3")]
    pub is_root: bool,
    #[prost(oneof="instruction::Instruction", tags="10, 11, 12, 13, 14")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        /// Transfers
        #[prost(message, tag="10")]
        Transfer(super::Transfer),
        #[prost(message, tag="11")]
        TransferWithSeed(super::TransferWithSeed),
        #[prost(message, tag="12")]
        CreateAccount(super::CreateAccount),
        #[prost(message, tag="13")]
        CreateAccountWithSeed(super::CreateAccountWithSeed),
        #[prost(message, tag="14")]
        WithdrawNonceAccount(super::WithdrawNonceAccount),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Balance {
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    #[prost(bytes="vec", tag="1")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub destination: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="3")]
    pub lamports: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferWithSeed {
    #[prost(bytes="vec", tag="1")]
    pub destination: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub lamports: u64,
    #[prost(bytes="vec", tag="3")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    /// Base account address for the seed.
    #[prost(bytes="vec", tag="4")]
    pub source_base: ::prost::alloc::vec::Vec<u8>,
    /// Owner of the source account.
    #[prost(bytes="vec", tag="5")]
    pub source_owner: ::prost::alloc::vec::Vec<u8>,
    /// Seed used to derive the source account.
    #[prost(string, tag="6")]
    pub source_seed: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAccount {
    /// Funding account address.
    #[prost(bytes="vec", tag="1")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    /// New account address.
    #[prost(bytes="vec", tag="2")]
    pub new_account: ::prost::alloc::vec::Vec<u8>,
    /// Owner program account address
    #[prost(bytes="vec", tag="3")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// Initial balance in lamports.
    #[prost(uint64, tag="4")]
    pub lamports: u64,
    /// Space allocated for the new account.
    #[prost(uint64, tag="5")]
    pub space: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAccountWithSeed {
    /// Funding account address.
    #[prost(bytes="vec", tag="1")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    /// New account address.
    #[prost(bytes="vec", tag="2")]
    pub new_account: ::prost::alloc::vec::Vec<u8>,
    /// Primary base account address used for deriving the seed.
    #[prost(bytes="vec", tag="3")]
    pub base: ::prost::alloc::vec::Vec<u8>,
    /// Optional secondary account related to the base.
    #[prost(bytes="vec", optional, tag="4")]
    pub base_account: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Owner program account address
    #[prost(bytes="vec", tag="5")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// Initial balance in lamports.
    #[prost(uint64, tag="6")]
    pub lamports: u64,
    /// Space allocated for the new account.
    #[prost(uint64, tag="7")]
    pub space: u64,
    /// Seed used to derive the new account.
    #[prost(string, tag="8")]
    pub seed: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WithdrawNonceAccount {
    /// Recipient account address.
    #[prost(bytes="vec", tag="1")]
    pub destination: ::prost::alloc::vec::Vec<u8>,
    /// Amount to withdraw in lamports.
    #[prost(uint64, tag="2")]
    pub lamports: u64,
    /// Nonce account address.
    #[prost(bytes="vec", tag="3")]
    pub nonce_account: ::prost::alloc::vec::Vec<u8>,
    /// Nonce authority account address.
    #[prost(bytes="vec", tag="4")]
    pub nonce_authority: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
