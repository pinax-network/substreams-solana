// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, tag="4")]
    pub fee: u64,
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
    #[prost(message, repeated, tag="7")]
    pub logs: ::prost::alloc::vec::Vec<Log>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="3")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="3")]
        Swap(super::SwapInstruction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<SwapAccounts>,
    #[prost(uint64, tag="2")]
    pub amount_in: u64,
    #[prost(uint64, tag="3")]
    pub min_amount_out: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapAccounts {
    #[prost(bytes="vec", tag="1")]
    pub lb_pair: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub bin_array_bitmap_extension: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub reserve_x: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="4")]
    pub reserve_y: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="5")]
    pub user_token_in: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub user_token_out: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub token_x_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub token_y_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="9")]
    pub oracle: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="10")]
    pub host_fee_in: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="12")]
    pub token_x_program: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="13")]
    pub token_y_program: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="14")]
    pub event_authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="15")]
    pub program: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub invoke_depth: u32,
    #[prost(enumeration="Event", tag="3")]
    pub event: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Event {
    EventUnknown = 0,
    EventAddLiquidity = 1,
    EventClaimFee = 2,
    EventClaimFee2 = 3,
    EventClaimReward = 4,
    EventClaimReward2 = 5,
    EventCompositionFee = 6,
    EventDecreasePositionLength = 7,
    EventDynamicFeeParameterUpdate = 8,
    EventFeeParameterUpdate = 9,
    EventFundReward = 10,
    EventGoToAbin = 11,
    EventIncreaseObservation = 12,
    EventIncreasePositionLength = 13,
    EventInitializeReward = 14,
    EventLbPairCreate = 15,
    EventPositionClose = 16,
    EventPositionCreate = 17,
    EventRebalancing = 18,
    EventRemoveLiquidity = 19,
    EventSwap = 20,
    EventUpdatePositionLockReleasePoint = 21,
    EventUpdatePositionOperator = 22,
    EventUpdateRewardDuration = 23,
    EventUpdateRewardFunder = 24,
    EventWithdrawIneligibleReward = 25,
}
impl Event {
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Event::EventUnknown => "EVENT_UNKNOWN",
            Event::EventAddLiquidity => "EVENT_ADD_LIQUIDITY",
            Event::EventClaimFee => "EVENT_CLAIM_FEE",
            Event::EventClaimFee2 => "EVENT_CLAIM_FEE2",
            Event::EventClaimReward => "EVENT_CLAIM_REWARD",
            Event::EventClaimReward2 => "EVENT_CLAIM_REWARD2",
            Event::EventCompositionFee => "EVENT_COMPOSITION_FEE",
            Event::EventDecreasePositionLength => "EVENT_DECREASE_POSITION_LENGTH",
            Event::EventDynamicFeeParameterUpdate => "EVENT_DYNAMIC_FEE_PARAMETER_UPDATE",
            Event::EventFeeParameterUpdate => "EVENT_FEE_PARAMETER_UPDATE",
            Event::EventFundReward => "EVENT_FUND_REWARD",
            Event::EventGoToAbin => "EVENT_GO_TO_ABIN",
            Event::EventIncreaseObservation => "EVENT_INCREASE_OBSERVATION",
            Event::EventIncreasePositionLength => "EVENT_INCREASE_POSITION_LENGTH",
            Event::EventInitializeReward => "EVENT_INITIALIZE_REWARD",
            Event::EventLbPairCreate => "EVENT_LB_PAIR_CREATE",
            Event::EventPositionClose => "EVENT_POSITION_CLOSE",
            Event::EventPositionCreate => "EVENT_POSITION_CREATE",
            Event::EventRebalancing => "EVENT_REBALANCING",
            Event::EventRemoveLiquidity => "EVENT_REMOVE_LIQUIDITY",
            Event::EventSwap => "EVENT_SWAP",
            Event::EventUpdatePositionLockReleasePoint => "EVENT_UPDATE_POSITION_LOCK_RELEASE_POINT",
            Event::EventUpdatePositionOperator => "EVENT_UPDATE_POSITION_OPERATOR",
            Event::EventUpdateRewardDuration => "EVENT_UPDATE_REWARD_DURATION",
            Event::EventUpdateRewardFunder => "EVENT_UPDATE_REWARD_FUNDER",
            Event::EventWithdrawIneligibleReward => "EVENT_WITHDRAW_INELIGIBLE_REWARD",
        }
    }
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVENT_UNKNOWN" => Some(Self::EventUnknown),
            "EVENT_ADD_LIQUIDITY" => Some(Self::EventAddLiquidity),
            "EVENT_CLAIM_FEE" => Some(Self::EventClaimFee),
            "EVENT_CLAIM_FEE2" => Some(Self::EventClaimFee2),
            "EVENT_CLAIM_REWARD" => Some(Self::EventClaimReward),
            "EVENT_CLAIM_REWARD2" => Some(Self::EventClaimReward2),
            "EVENT_COMPOSITION_FEE" => Some(Self::EventCompositionFee),
            "EVENT_DECREASE_POSITION_LENGTH" => Some(Self::EventDecreasePositionLength),
            "EVENT_DYNAMIC_FEE_PARAMETER_UPDATE" => Some(Self::EventDynamicFeeParameterUpdate),
            "EVENT_FEE_PARAMETER_UPDATE" => Some(Self::EventFeeParameterUpdate),
            "EVENT_FUND_REWARD" => Some(Self::EventFundReward),
            "EVENT_GO_TO_ABIN" => Some(Self::EventGoToAbin),
            "EVENT_INCREASE_OBSERVATION" => Some(Self::EventIncreaseObservation),
            "EVENT_INCREASE_POSITION_LENGTH" => Some(Self::EventIncreasePositionLength),
            "EVENT_INITIALIZE_REWARD" => Some(Self::EventInitializeReward),
            "EVENT_LB_PAIR_CREATE" => Some(Self::EventLbPairCreate),
            "EVENT_POSITION_CLOSE" => Some(Self::EventPositionClose),
            "EVENT_POSITION_CREATE" => Some(Self::EventPositionCreate),
            "EVENT_REBALANCING" => Some(Self::EventRebalancing),
            "EVENT_REMOVE_LIQUIDITY" => Some(Self::EventRemoveLiquidity),
            "EVENT_SWAP" => Some(Self::EventSwap),
            "EVENT_UPDATE_POSITION_LOCK_RELEASE_POINT" => Some(Self::EventUpdatePositionLockReleasePoint),
            "EVENT_UPDATE_POSITION_OPERATOR" => Some(Self::EventUpdatePositionOperator),
            "EVENT_UPDATE_REWARD_DURATION" => Some(Self::EventUpdateRewardDuration),
            "EVENT_UPDATE_REWARD_FUNDER" => Some(Self::EventUpdateRewardFunder),
            "EVENT_WITHDRAW_INELIGIBLE_REWARD" => Some(Self::EventWithdrawIneligibleReward),
            _ => None,
        }
    }
}
