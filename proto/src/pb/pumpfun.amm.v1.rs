// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Fee payer account address.
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    /// Signers of the transaction.
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="4")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    /// Instructions executed in this transaction.
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="10, 11, 12, 13, 14, 15")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="10")]
        BuyEvent(super::BuyEvent),
        #[prost(message, tag="11")]
        BuyInstruction(super::BuyInstruction),
        #[prost(message, tag="12")]
        SellEvent(super::SellEvent),
        #[prost(message, tag="13")]
        SellInstruction(super::SellInstruction),
        #[prost(message, tag="14")]
        CreatePoolEvent(super::CreatePoolEvent),
        #[prost(message, tag="15")]
        CreatePoolInstruction(super::CreatePoolInstruction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyInstruction {
    /// Accounts involved in the buy operation.
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<TradeAccounts>,
    /// Amount of base token out.
    #[prost(uint64, tag="2")]
    pub base_amount_out: u64,
    /// Maximum amount of quote token in.
    #[prost(uint64, tag="3")]
    pub max_quote_amount_in: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SellInstruction {
    /// Accounts involved in the buy operation.
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<TradeAccounts>,
    /// Amount of base token in.
    #[prost(uint64, tag="2")]
    pub base_amount_in: u64,
    /// Minimum amount of quote token out.
    #[prost(uint64, tag="3")]
    pub min_quote_amount_out: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeAccounts {
    /// accounts
    ///
    /// Pool account address.
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    /// User account address.
    #[prost(bytes="vec", tag="2")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    /// Global configuration account address.
    #[prost(bytes="vec", tag="3")]
    pub global_config: ::prost::alloc::vec::Vec<u8>,
    /// User's base token account address.
    #[prost(bytes="vec", tag="4")]
    pub base_mint: ::prost::alloc::vec::Vec<u8>,
    /// User's quote token account address.
    #[prost(bytes="vec", tag="5")]
    pub quote_mint: ::prost::alloc::vec::Vec<u8>,
    /// User's base token account address.
    #[prost(bytes="vec", tag="6")]
    pub user_base_token_account: ::prost::alloc::vec::Vec<u8>,
    /// User's quote token account address.
    #[prost(bytes="vec", tag="7")]
    pub user_quote_token_account: ::prost::alloc::vec::Vec<u8>,
    /// Pool's base token account address.
    #[prost(bytes="vec", tag="8")]
    pub pool_base_token_account: ::prost::alloc::vec::Vec<u8>,
    /// Pool's quote token account address.
    #[prost(bytes="vec", tag="9")]
    pub pool_quote_token_account: ::prost::alloc::vec::Vec<u8>,
    /// Protocol fee recipient account address.
    #[prost(bytes="vec", tag="10")]
    pub protocol_fee_recipient: ::prost::alloc::vec::Vec<u8>,
    /// Protocol fee recipient token account address
    #[prost(bytes="vec", tag="11")]
    pub protocol_fee_recipient_token_account: ::prost::alloc::vec::Vec<u8>,
    /// V2 specific accounts
    ///
    /// Coin creator vault associated token account address.
    #[prost(bytes="vec", optional, tag="18")]
    pub coin_creator_vault_ata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Coin creator vault authority account address.
    #[prost(bytes="vec", optional, tag="19")]
    pub coin_creator_vault_authority: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyEvent {
    /// Timestamp of the event.
    #[prost(int64, tag="1")]
    pub timestamp: i64,
    /// Amount of base token out.
    #[prost(uint64, tag="2")]
    pub base_amount_out: u64,
    /// Maximum amount of quote token in.
    #[prost(uint64, tag="3")]
    pub max_quote_amount_in: u64,
    /// User's base token reserves.
    #[prost(uint64, tag="4")]
    pub user_base_token_reserves: u64,
    /// User's quote token reserves.
    #[prost(uint64, tag="5")]
    pub user_quote_token_reserves: u64,
    /// Pool's base token reserves.
    #[prost(uint64, tag="6")]
    pub pool_base_token_reserves: u64,
    /// Pool's quote token reserves.
    #[prost(uint64, tag="7")]
    pub pool_quote_token_reserves: u64,
    /// Amount of quote token in.
    #[prost(uint64, tag="8")]
    pub quote_amount_in: u64,
    /// LP fee in basis points.
    #[prost(uint64, tag="9")]
    pub lp_fee_basis_points: u64,
    /// LP fee in lamports.
    #[prost(uint64, tag="10")]
    pub lp_fee: u64,
    /// Protocol fee in basis points.
    #[prost(uint64, tag="11")]
    pub protocol_fee_basis_points: u64,
    /// Protocol fee in lamports.
    #[prost(uint64, tag="12")]
    pub protocol_fee: u64,
    /// Quote amount in with LP fee applied.
    #[prost(uint64, tag="13")]
    pub quote_amount_in_with_lp_fee: u64,
    /// User's quote amount in after fees.
    #[prost(uint64, tag="14")]
    pub user_quote_amount_in: u64,
    /// Pool account address.
    #[prost(bytes="vec", tag="15")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    /// User account address.
    #[prost(bytes="vec", tag="16")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    /// User's base token account address.
    #[prost(bytes="vec", tag="17")]
    pub user_base_token_account: ::prost::alloc::vec::Vec<u8>,
    /// User's quote token account address.
    #[prost(bytes="vec", tag="18")]
    pub user_quote_token_account: ::prost::alloc::vec::Vec<u8>,
    /// Protocol fee recipient account address.
    #[prost(bytes="vec", tag="19")]
    pub protocol_fee_recipient: ::prost::alloc::vec::Vec<u8>,
    /// Protocol fee recipient token account address.
    #[prost(bytes="vec", tag="20")]
    pub protocol_fee_recipient_token_account: ::prost::alloc::vec::Vec<u8>,
    /// V2 specific fields
    ///
    /// Coin creator account address.
    #[prost(bytes="vec", optional, tag="21")]
    pub coin_creator: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Coin creator fee in basis points
    #[prost(uint64, optional, tag="22")]
    pub coin_creator_fee_basis_points: ::core::option::Option<u64>,
    /// Coin creator fee in lamports.
    #[prost(uint64, optional, tag="23")]
    pub coin_creator_fee: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SellEvent {
    /// Timestamp of the event.
    #[prost(int64, tag="1")]
    pub timestamp: i64,
    /// Amount of base token in.
    #[prost(uint64, tag="2")]
    pub base_amount_in: u64,
    /// Minimum amount of quote token out.
    #[prost(uint64, tag="3")]
    pub min_quote_amount_out: u64,
    /// User's base token reserves.
    #[prost(uint64, tag="4")]
    pub user_base_token_reserves: u64,
    /// User's quote token reserves.
    #[prost(uint64, tag="5")]
    pub user_quote_token_reserves: u64,
    /// Pool's base token reserves.
    #[prost(uint64, tag="6")]
    pub pool_base_token_reserves: u64,
    /// Pool's quote token reserves.
    #[prost(uint64, tag="7")]
    pub pool_quote_token_reserves: u64,
    /// Amount of quote token out.
    #[prost(uint64, tag="8")]
    pub quote_amount_out: u64,
    /// LP fee in basis points.
    #[prost(uint64, tag="9")]
    pub lp_fee_basis_points: u64,
    /// LP fee in lamports.
    #[prost(uint64, tag="10")]
    pub lp_fee: u64,
    /// Protocol fee in basis points.
    #[prost(uint64, tag="11")]
    pub protocol_fee_basis_points: u64,
    /// Protocol fee in lamports.
    #[prost(uint64, tag="12")]
    pub protocol_fee: u64,
    /// Quote amount out without LP fee applied.
    #[prost(uint64, tag="13")]
    pub quote_amount_out_without_lp_fee: u64,
    /// User's quote amount out after fees.
    #[prost(uint64, tag="14")]
    pub user_quote_amount_out: u64,
    /// Pool account address.
    #[prost(bytes="vec", tag="15")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    /// User account address.
    #[prost(bytes="vec", tag="16")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    /// User's base token account address.
    #[prost(bytes="vec", tag="17")]
    pub user_base_token_account: ::prost::alloc::vec::Vec<u8>,
    /// User's quote token account address.
    #[prost(bytes="vec", tag="18")]
    pub user_quote_token_account: ::prost::alloc::vec::Vec<u8>,
    /// Protocol fee recipient account address.
    #[prost(bytes="vec", tag="19")]
    pub protocol_fee_recipient: ::prost::alloc::vec::Vec<u8>,
    /// Protocol fee recipient token account address.
    #[prost(bytes="vec", tag="20")]
    pub protocol_fee_recipient_token_account: ::prost::alloc::vec::Vec<u8>,
    /// V2 specific fields
    ///
    /// Coin creator account address.
    #[prost(bytes="vec", optional, tag="21")]
    pub coin_creator: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Coin creator fee in basis points
    #[prost(uint64, optional, tag="22")]
    pub coin_creator_fee_basis_points: ::core::option::Option<u64>,
    /// Coin creator fee in lamports.
    #[prost(uint64, optional, tag="23")]
    pub coin_creator_fee: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePoolEvent {
    /// Timestamp of the event.
    #[prost(int64, tag="1")]
    pub timestamp: i64,
    /// Index of the pool.
    #[prost(uint32, tag="2")]
    pub index: u32,
    /// Creator's account address.
    #[prost(bytes="vec", tag="3")]
    pub creator: ::prost::alloc::vec::Vec<u8>,
    /// Base mint address.
    #[prost(bytes="vec", tag="4")]
    pub base_mint: ::prost::alloc::vec::Vec<u8>,
    /// Quote mint address.
    #[prost(bytes="vec", tag="5")]
    pub quote_mint: ::prost::alloc::vec::Vec<u8>,
    /// Base mint decimals.
    #[prost(uint32, tag="6")]
    pub base_mint_decimals: u32,
    /// Quote mint decimals.
    #[prost(uint32, tag="7")]
    pub quote_mint_decimals: u32,
    /// Amount of base token in.
    #[prost(uint64, tag="8")]
    pub base_amount_in: u64,
    /// Amount of quote token in.
    #[prost(uint64, tag="9")]
    pub quote_amount_in: u64,
    /// Pool's base token amount.
    #[prost(uint64, tag="10")]
    pub pool_base_amount: u64,
    /// Pool's quote token amount.
    #[prost(uint64, tag="11")]
    pub pool_quote_amount: u64,
    /// Minimum liquidity for the pool.
    #[prost(uint64, tag="12")]
    pub minimum_liquidity: u64,
    /// Initial liquidity provided to the pool.
    #[prost(uint64, tag="13")]
    pub initial_liquidity: u64,
    /// LP token amount out.
    #[prost(uint64, tag="14")]
    pub lp_token_amount_out: u64,
    /// Pool bump seed.
    #[prost(uint32, tag="15")]
    pub pool_bump: u32,
    /// Pool account address.
    #[prost(bytes="vec", tag="16")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    /// LP mint address.
    #[prost(bytes="vec", tag="17")]
    pub lp_mint: ::prost::alloc::vec::Vec<u8>,
    /// User's base token account address.
    #[prost(bytes="vec", tag="18")]
    pub user_base_token_account: ::prost::alloc::vec::Vec<u8>,
    /// User's quote token account address.
    #[prost(bytes="vec", tag="19")]
    pub user_quote_token_account: ::prost::alloc::vec::Vec<u8>,
    /// V2 specific fields
    ///
    /// Coin creator account address.
    #[prost(bytes="vec", optional, tag="20")]
    pub coin_creator: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePoolInstruction {
    /// Index of the pool.
    #[prost(uint32, tag="1")]
    pub index: u32,
    /// Amount of base token in.
    #[prost(uint64, tag="2")]
    pub base_amount_in: u64,
    /// Amount of quote token in.
    #[prost(uint64, tag="3")]
    pub quote_amount_in: u64,
    /// V2 specific fields
    ///
    /// Coin creator account address.
    #[prost(bytes="vec", optional, tag="4")]
    pub coin_creator: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
// @@protoc_insertion_point(module)
