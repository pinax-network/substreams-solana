// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Fee payer account address.
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    /// Signers of the transaction.
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="4")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    /// Instructions executed in this transaction.
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="10")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="10")]
        SwapInstruction(super::SwapInstruction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapInstruction {
    /// Accounts involved in the swap.
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<SwapAccounts>,
    /// Amount of tokens provided.
    #[prost(uint64, tag="2")]
    pub delta_in: u64,
    /// Price limit as decimal string.
    #[prost(string, tag="3")]
    pub price_limit: ::prost::alloc::string::String,
    /// Direction of the swap.
    #[prost(bool, tag="4")]
    pub x_to_y: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapAccounts {
    /// Pool account address.
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    /// Token X mint address.
    #[prost(bytes="vec", tag="2")]
    pub token_x: ::prost::alloc::vec::Vec<u8>,
    /// Token Y mint address.
    #[prost(bytes="vec", tag="3")]
    pub token_y: ::prost::alloc::vec::Vec<u8>,
    /// Pool token X account.
    #[prost(bytes="vec", tag="4")]
    pub pool_x_account: ::prost::alloc::vec::Vec<u8>,
    /// Pool token Y account.
    #[prost(bytes="vec", tag="5")]
    pub pool_y_account: ::prost::alloc::vec::Vec<u8>,
    /// Swapper token X account.
    #[prost(bytes="vec", tag="6")]
    pub swapper_x_account: ::prost::alloc::vec::Vec<u8>,
    /// Swapper token Y account.
    #[prost(bytes="vec", tag="7")]
    pub swapper_y_account: ::prost::alloc::vec::Vec<u8>,
    /// Swapper account address.
    #[prost(bytes="vec", tag="8")]
    pub swapper: ::prost::alloc::vec::Vec<u8>,
    /// Referrer token X account.
    #[prost(bytes="vec", optional, tag="9")]
    pub referrer_x_account: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Referrer token Y account.
    #[prost(bytes="vec", optional, tag="10")]
    pub referrer_y_account: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Referrer account address.
    #[prost(bytes="vec", optional, tag="11")]
    pub referrer: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
// @@protoc_insertion_point(module)
