// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// Fee payer account address.
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    /// Signers of the transaction.
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Lamports paid for this instruction.
    #[prost(uint64, tag="4")]
    pub fee: u64,
    /// Compute units consumed by this instruction.
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    /// Instructions executed in this transaction.
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
    /// Token balances before the transaction.
    #[prost(message, repeated, tag="7")]
    pub pre_token_balances: ::prost::alloc::vec::Vec<TokenBalance>,
    /// Token balances after the transaction.
    #[prost(message, repeated, tag="8")]
    pub post_token_balances: ::prost::alloc::vec::Vec<TokenBalance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    /// Indicates if this instruction is a root instruction.
    #[prost(bool, tag="3")]
    pub is_root: bool,
    #[prost(oneof="instruction::Instruction", tags="10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        /// Transfers
        #[prost(message, tag="10")]
        Transfer(super::Transfer),
        #[prost(message, tag="11")]
        Mint(super::Transfer),
        #[prost(message, tag="12")]
        Burn(super::Transfer),
        /// Permissions
        #[prost(message, tag="13")]
        Approve(super::Approve),
        #[prost(message, tag="14")]
        Revoke(super::Revoke),
        #[prost(message, tag="15")]
        FreezeAccount(super::FreezeAccount),
        #[prost(message, tag="16")]
        ThawAccount(super::ThawAccount),
        /// Mints
        #[prost(message, tag="17")]
        InitializeMint(super::InitializeMint),
        /// Accounts
        #[prost(message, tag="18")]
        InitializeAccount(super::InitializeAccount),
        #[prost(message, tag="19")]
        InitializeImmutableOwner(super::InitializeImmutableOwner),
        #[prost(message, tag="20")]
        SetAuthority(super::SetAuthority),
        #[prost(message, tag="21")]
        CloseAccount(super::CloseAccount),
        /// Metadata
        /// <https://github.com/solana-program/token-metadata>
        ///
        /// SPL-2022 Initialize Token Metadata
        #[prost(message, tag="22")]
        InitializeTokenMetadata(super::InitializeTokenMetadata),
        /// SPL-2022 Update Field
        #[prost(message, tag="23")]
        UpdateTokenMetadataField(super::UpdateTokenMetadataField),
        /// SPL-2022 Update Authority
        #[prost(message, tag="24")]
        UpdateTokenMetadataAuthority(super::UpdateTokenMetadataAuthority),
        /// SPL-2022 Remove Key
        #[prost(message, tag="25")]
        RemoveTokenMetadataField(super::RemoveTokenMetadataField),
        /// Memo
        /// <https://github.com/solana-program/memo>
        ///
        /// SPL Memo Program
        #[prost(message, tag="26")]
        Memo(super::Memo),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenBalance {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="4")]
    pub amount: u64,
    /// uint8
    #[prost(uint32, tag="5")]
    pub decimals: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// -- authority --
    #[prost(bytes="vec", tag="1")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub destination: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="12")]
    pub amount: u64,
    /// SPL-2022
    #[prost(bytes="vec", optional, tag="13")]
    pub mint: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// uint8
    #[prost(uint32, optional, tag="14")]
    pub decimals: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializeMint {
    #[prost(bytes="vec", tag="1")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub mint_authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", optional, tag="3")]
    pub freeze_authority: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// uint8
    #[prost(uint32, tag="4")]
    pub decimals: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializeAccount {
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializeImmutableOwner {
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Approve {
    /// -- authority --
    #[prost(bytes="vec", tag="1")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", optional, tag="11")]
    pub mint: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes="vec", tag="12")]
    pub delegate: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="13")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="14")]
    pub amount: u64,
    /// uint8
    #[prost(uint32, optional, tag="15")]
    pub decimals: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Revoke {
    /// -- authority --
    #[prost(bytes="vec", tag="1")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="2")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub source: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAuthority {
    /// The token account or mint to change authority on
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    /// Type of authority being changed
    #[prost(enumeration="AuthorityType", tag="2")]
    pub authority_type: i32,
    /// New authority (null if removing)
    #[prost(bytes="vec", optional, tag="3")]
    pub new_authority: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Current authority expected to sign
    #[prost(bytes="vec", tag="4")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    /// Current multisig authority expected to sign
    #[prost(bytes="vec", repeated, tag="5")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloseAccount {
    /// The token account to close
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    /// The account to receive the closed account's balance
    #[prost(bytes="vec", tag="2")]
    pub destination: ::prost::alloc::vec::Vec<u8>,
    /// The authority to close the account
    #[prost(bytes="vec", tag="3")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    /// The multisig authority to close the account
    #[prost(bytes="vec", repeated, tag="4")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreezeAccount {
    /// The token account to freeze
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    /// The mint associated with the token account
    #[prost(bytes="vec", tag="2")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// The authority to freeze the account
    #[prost(bytes="vec", tag="3")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    /// The multisig authority to freeze the account
    #[prost(bytes="vec", repeated, tag="4")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThawAccount {
    /// The token account to thaw
    #[prost(bytes="vec", tag="1")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    /// The mint associated with the token account
    #[prost(bytes="vec", tag="2")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// The authority to thaw the account
    #[prost(bytes="vec", tag="3")]
    pub authority: ::prost::alloc::vec::Vec<u8>,
    /// The multisig authority to thaw the account
    #[prost(bytes="vec", repeated, tag="4")]
    pub multisig_authority: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Memo {
    /// instruction data, typically a memo
    #[prost(bytes="vec", tag="1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// UTF-8 decoded memo data
    #[prost(string, tag="2")]
    pub memo: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitializeTokenMetadata {
    /// accounts
    ///
    /// Metadata account address
    #[prost(bytes="vec", tag="1")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
    /// Update authority account address
    #[prost(bytes="vec", tag="2")]
    pub update_authority: ::prost::alloc::vec::Vec<u8>,
    /// Mint account address
    #[prost(bytes="vec", tag="3")]
    pub mint: ::prost::alloc::vec::Vec<u8>,
    /// Mint authority account address
    #[prost(bytes="vec", tag="4")]
    pub mint_authority: ::prost::alloc::vec::Vec<u8>,
    /// instruction data
    ///
    /// Name of the token metadata
    #[prost(string, tag="5")]
    pub name: ::prost::alloc::string::String,
    /// Symbol of the token metadata
    #[prost(string, tag="6")]
    pub symbol: ::prost::alloc::string::String,
    /// URI of the token metadata
    #[prost(string, tag="7")]
    pub uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTokenMetadataField {
    /// Metadata account address
    #[prost(bytes="vec", tag="1")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
    /// Update authority account address
    #[prost(bytes="vec", tag="2")]
    pub update_authority: ::prost::alloc::vec::Vec<u8>,
    /// Name of the field to update
    #[prost(string, tag="3")]
    pub field: ::prost::alloc::string::String,
    /// Value of the field to update
    #[prost(string, tag="4")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTokenMetadataAuthority {
    /// Metadata account address
    #[prost(bytes="vec", tag="1")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
    /// Update authority account address
    #[prost(bytes="vec", tag="2")]
    pub update_authority: ::prost::alloc::vec::Vec<u8>,
    /// New update authority account address (null if removing ex: `11111111111111111111111111111111`)
    #[prost(bytes="vec", tag="3")]
    pub new_authority: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveTokenMetadataField {
    /// Metadata account address
    #[prost(bytes="vec", tag="1")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
    /// Update authority account address
    #[prost(bytes="vec", tag="2")]
    pub update_authority: ::prost::alloc::vec::Vec<u8>,
    /// Name of the key to remove
    #[prost(string, tag="3")]
    pub key: ::prost::alloc::string::String,
    /// Whether the removal is idempotent
    #[prost(bool, tag="4")]
    pub idempotent: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthorityType {
    Unspecified = 0,
    /// Authority to mint new tokens
    MintTokens = 1,
    /// Authority to freeze any account associated with the Mint
    FreezeAccount = 2,
    /// Owner of a given token account
    AccountOwner = 3,
    /// Authority to close a token account
    CloseAccount = 4,
    /// Authority to set the transfer fee
    TransferFeeConfig = 5,
    /// Authority to withdraw withheld tokens
    WithheldWithdraw = 6,
    /// Authority to close a mint account
    CloseMint = 7,
    /// Authority to set the interest rate
    InterestRate = 8,
    /// Authority to transfer or burn any tokens for a mint
    PermanentDelegate = 9,
    /// Authority to update confidential transfer mint and approve accounts for confidential transfers
    ConfidentialTransferMint = 10,
    /// Authority to set the transfer hook program id
    TransferHookProgramId = 11,
    /// Authority to set the withdraw withheld
    ConfidentialTransferFeeConfig = 12,
    /// Authority to set the metadata address
    MetadataPointer = 13,
}
impl AuthorityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AuthorityType::Unspecified => "AUTHORITY_TYPE_UNSPECIFIED",
            AuthorityType::MintTokens => "AUTHORITY_TYPE_MINT_TOKENS",
            AuthorityType::FreezeAccount => "AUTHORITY_TYPE_FREEZE_ACCOUNT",
            AuthorityType::AccountOwner => "AUTHORITY_TYPE_ACCOUNT_OWNER",
            AuthorityType::CloseAccount => "AUTHORITY_TYPE_CLOSE_ACCOUNT",
            AuthorityType::TransferFeeConfig => "AUTHORITY_TYPE_TRANSFER_FEE_CONFIG",
            AuthorityType::WithheldWithdraw => "AUTHORITY_TYPE_WITHHELD_WITHDRAW",
            AuthorityType::CloseMint => "AUTHORITY_TYPE_CLOSE_MINT",
            AuthorityType::InterestRate => "AUTHORITY_TYPE_INTEREST_RATE",
            AuthorityType::PermanentDelegate => "AUTHORITY_TYPE_PERMANENT_DELEGATE",
            AuthorityType::ConfidentialTransferMint => "AUTHORITY_TYPE_CONFIDENTIAL_TRANSFER_MINT",
            AuthorityType::TransferHookProgramId => "AUTHORITY_TYPE_TRANSFER_HOOK_PROGRAM_ID",
            AuthorityType::ConfidentialTransferFeeConfig => "AUTHORITY_TYPE_CONFIDENTIAL_TRANSFER_FEE_CONFIG",
            AuthorityType::MetadataPointer => "AUTHORITY_TYPE_METADATA_POINTER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHORITY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "AUTHORITY_TYPE_MINT_TOKENS" => Some(Self::MintTokens),
            "AUTHORITY_TYPE_FREEZE_ACCOUNT" => Some(Self::FreezeAccount),
            "AUTHORITY_TYPE_ACCOUNT_OWNER" => Some(Self::AccountOwner),
            "AUTHORITY_TYPE_CLOSE_ACCOUNT" => Some(Self::CloseAccount),
            "AUTHORITY_TYPE_TRANSFER_FEE_CONFIG" => Some(Self::TransferFeeConfig),
            "AUTHORITY_TYPE_WITHHELD_WITHDRAW" => Some(Self::WithheldWithdraw),
            "AUTHORITY_TYPE_CLOSE_MINT" => Some(Self::CloseMint),
            "AUTHORITY_TYPE_INTEREST_RATE" => Some(Self::InterestRate),
            "AUTHORITY_TYPE_PERMANENT_DELEGATE" => Some(Self::PermanentDelegate),
            "AUTHORITY_TYPE_CONFIDENTIAL_TRANSFER_MINT" => Some(Self::ConfidentialTransferMint),
            "AUTHORITY_TYPE_TRANSFER_HOOK_PROGRAM_ID" => Some(Self::TransferHookProgramId),
            "AUTHORITY_TYPE_CONFIDENTIAL_TRANSFER_FEE_CONFIG" => Some(Self::ConfidentialTransferFeeConfig),
            "AUTHORITY_TYPE_METADATA_POINTER" => Some(Self::MetadataPointer),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
