// @generated
// This file is @generated by prost-build.
/// -----------------------------------------------------------------------------
/// Top-level containers
/// -----------------------------------------------------------------------------
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(bytes="vec", tag="1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub fee_payer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", repeated, tag="3")]
    pub signers: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, tag="4")]
    pub fee: u64,
    #[prost(uint64, tag="5")]
    pub compute_units_consumed: u64,
    #[prost(message, repeated, tag="6")]
    pub instructions: ::prost::alloc::vec::Vec<Instruction>,
    #[prost(message, repeated, tag="7")]
    pub logs: ::prost::alloc::vec::Vec<Log>,
}
/// -----------------------------------------------------------------------------
/// Instructions
/// -----------------------------------------------------------------------------
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instruction {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub stack_height: u32,
    #[prost(oneof="instruction::Instruction", tags="3")]
    pub instruction: ::core::option::Option<instruction::Instruction>,
}
/// Nested message and enum types in `Instruction`.
pub mod instruction {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Instruction {
        #[prost(message, tag="3")]
        Swap(super::SwapInstruction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapInstruction {
    #[prost(message, optional, tag="1")]
    pub accounts: ::core::option::Option<SwapAccounts>,
    #[prost(uint64, tag="2")]
    pub in_amount: u64,
    #[prost(uint64, tag="3")]
    pub minimum_out_amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapAccounts {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub user_source_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub user_destination_token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="4")]
    pub a_vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="5")]
    pub b_vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub a_token_vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub b_token_vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub a_vault_lp_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="9")]
    pub b_vault_lp_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="10")]
    pub a_vault_lp: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub b_vault_lp: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="12")]
    pub protocol_token_fee: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="13")]
    pub user: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="14")]
    pub vault_program: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="15")]
    pub token_program: ::prost::alloc::vec::Vec<u8>,
}
/// -----------------------------------------------------------------------------
/// Logs
/// -----------------------------------------------------------------------------
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Log {
    #[prost(bytes="vec", tag="1")]
    pub program_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="2")]
    pub invoke_depth: u32,
    #[prost(oneof="log::Log", tags="3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20")]
    pub log: ::core::option::Option<log::Log>,
}
/// Nested message and enum types in `Log`.
pub mod log {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Log {
        #[prost(message, tag="3")]
        AddLiquidity(super::AddLiquidityLog),
        #[prost(message, tag="4")]
        RemoveLiquidity(super::RemoveLiquidityLog),
        #[prost(message, tag="5")]
        BootstrapLiquidity(super::BootstrapLiquidityLog),
        #[prost(message, tag="6")]
        Swap(super::SwapLog),
        #[prost(message, tag="7")]
        SetPoolFees(super::SetPoolFeesLog),
        #[prost(message, tag="8")]
        PoolInfo(super::PoolInfoLog),
        #[prost(message, tag="9")]
        TransferAdmin(super::TransferAdminLog),
        #[prost(message, tag="10")]
        OverrideCurveParam(super::OverrideCurveParamLog),
        #[prost(message, tag="11")]
        PoolCreated(super::PoolCreatedLog),
        #[prost(message, tag="12")]
        PoolEnabled(super::PoolEnabledLog),
        #[prost(message, tag="13")]
        MigrateFeeAccount(super::MigrateFeeAccountLog),
        #[prost(message, tag="14")]
        CreateLockEscrow(super::CreateLockEscrowLog),
        #[prost(message, tag="15")]
        Lock(super::LockLog),
        #[prost(message, tag="16")]
        ClaimFee(super::ClaimFeeLog),
        #[prost(message, tag="17")]
        CreateConfig(super::CreateConfigLog),
        #[prost(message, tag="18")]
        CloseConfig(super::CloseConfigLog),
        #[prost(message, tag="19")]
        WithdrawProtocolFees(super::WithdrawProtocolFeesLog),
        #[prost(message, tag="20")]
        PartnerClaimFees(super::PartnerClaimFeesLog),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddLiquidityLog {
    #[prost(uint64, tag="1")]
    pub lp_mint_amount: u64,
    #[prost(uint64, tag="2")]
    pub token_a_amount: u64,
    #[prost(uint64, tag="3")]
    pub token_b_amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveLiquidityLog {
    #[prost(uint64, tag="1")]
    pub lp_unmint_amount: u64,
    #[prost(uint64, tag="2")]
    pub token_a_out_amount: u64,
    #[prost(uint64, tag="3")]
    pub token_b_out_amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BootstrapLiquidityLog {
    #[prost(uint64, tag="1")]
    pub lp_mint_amount: u64,
    #[prost(uint64, tag="2")]
    pub token_a_amount: u64,
    #[prost(uint64, tag="3")]
    pub token_b_amount: u64,
    #[prost(bytes="vec", tag="4")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapLog {
    #[prost(uint64, tag="1")]
    pub in_amount: u64,
    #[prost(uint64, tag="2")]
    pub out_amount: u64,
    #[prost(uint64, tag="3")]
    pub trade_fee: u64,
    #[prost(uint64, tag="4")]
    pub protocol_fee: u64,
    #[prost(uint64, tag="5")]
    pub host_fee: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPoolFeesLog {
    #[prost(uint64, tag="1")]
    pub trade_fee_numerator: u64,
    #[prost(uint64, tag="2")]
    pub trade_fee_denominator: u64,
    #[prost(uint64, tag="3")]
    pub protocol_trade_fee_numerator: u64,
    #[prost(uint64, tag="4")]
    pub protocol_trade_fee_denominator: u64,
    #[prost(bytes="vec", tag="5")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PoolInfoLog {
    #[prost(uint64, tag="1")]
    pub token_a_amount: u64,
    #[prost(uint64, tag="2")]
    pub token_b_amount: u64,
    #[prost(double, tag="3")]
    pub virtual_price: f64,
    #[prost(uint64, tag="4")]
    pub current_timestamp: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferAdminLog {
    #[prost(bytes="vec", tag="1")]
    pub admin: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub new_admin: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OverrideCurveParamLog {
    #[prost(uint64, tag="1")]
    pub new_amp: u64,
    #[prost(uint64, tag="2")]
    pub updated_timestamp: u64,
    #[prost(bytes="vec", tag="3")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolCreatedLog {
    #[prost(bytes="vec", tag="1")]
    pub lp_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub token_a_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub token_b_mint: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag="4")]
    pub pool_type: u32,
    #[prost(bytes="vec", tag="5")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolEnabledLog {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag="2")]
    pub enabled: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MigrateFeeAccountLog {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub new_admin_token_a_fee: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub new_admin_token_b_fee: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="4")]
    pub token_a_amount: u64,
    #[prost(uint64, tag="5")]
    pub token_b_amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateLockEscrowLog {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockLog {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="3")]
    pub amount: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClaimFeeLog {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="3")]
    pub amount: u64,
    #[prost(uint64, tag="4")]
    pub a_fee: u64,
    #[prost(uint64, tag="5")]
    pub b_fee: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConfigLog {
    #[prost(uint64, tag="1")]
    pub trade_fee_numerator: u64,
    #[prost(uint64, tag="2")]
    pub protocol_trade_fee_numerator: u64,
    #[prost(bytes="vec", tag="3")]
    pub config: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloseConfigLog {
    #[prost(bytes="vec", tag="1")]
    pub config: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WithdrawProtocolFeesLog {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub protocol_a_fee: u64,
    #[prost(uint64, tag="3")]
    pub protocol_b_fee: u64,
    #[prost(bytes="vec", tag="4")]
    pub protocol_a_fee_owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="5")]
    pub protocol_b_fee_owner: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartnerClaimFeesLog {
    #[prost(bytes="vec", tag="1")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag="2")]
    pub fee_a: u64,
    #[prost(uint64, tag="3")]
    pub fee_b: u64,
    #[prost(bytes="vec", tag="4")]
    pub partner: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
