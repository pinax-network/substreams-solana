syntax = "proto3";

package pumpfun.v1;

message Events {
  repeated Transaction transactions = 1;
}

message Transaction {
    bytes signature = 1;
    bytes fee_payer = 2; // Fee payer account address.
    repeated bytes signers = 3; // Signers of the transaction.
    uint64 fee = 4; // Lamports paid for this instruction.
    uint64 compute_units_consumed = 5; // Compute units consumed by this instruction.
    repeated Instruction instructions = 6; // Instructions executed in this transaction.
}

message Instruction {
    bytes program_id = 1;
    uint32 stack_height = 2;
    oneof instruction {
        BuyInstruction buy = 10;
        SellInstruction sell = 11;
        CreateInstruction create = 13;
        SetParamsInstruction set_params = 14;
        InitializeInstruction initialize = 15;
        WithdrawInstruction withdraw = 16;
        TradeEvent trade = 17;
    }
}

message InitializeInstruction {}
message WithdrawInstruction {}

message BuyInstruction {
    TradeAccounts accounts = 1;
    uint64 amount = 2;
    uint64 max_sol_cost = 3;
}

message SellInstruction {
    TradeAccounts accounts = 1;
    uint64 amount = 2;
    uint64 min_sol_output = 3;
}

message TradeAccounts {
    bytes global = 1; // Global state account.
    bytes fee_recipient = 2; // Account that will collect protocol fees.
    bytes mint = 3; // SPL-Token mint address.
    bytes bonding_curve = 4; // Bonding-curve configuration account.
    bytes associated_bonding_curve = 5; // Vault holding the curve’s token reserve.
    bytes associated_user = 6; // User state (per-user data).
    bytes user = 7; // Buyer wallet (fee payer).
    // bytes system_program = 8; // System program ID.
    // bytes token_program = 9; // SPL-Token program ID.
    bytes creator_vault = 10; // Vault for creator fees.
    // bytes event_authority = 11; // Event authority account.
    // bytes program = 12; // Pump.fun program ID.
}

message CreateInstruction {
     string name = 1; // UTF-8 name of the token pool.
     string symbol = 2; // Ticker symbol (≤ 10 UTF-8 bytes).
     string uri = 3; // URI pointing to off-chain JSON metadata.
     bytes creator = 4; // Pool creator (receives creator fees).
}

message SetParamsInstruction {
    bytes fee_recipient = 1; // Account that will collect protocol fees going forward.
    uint64 initial_virtual_token_reserves = 2; // Virtual token reserve used in price calculation.
    uint64 initial_virtual_sol_reserves = 3; // Virtual SOL reserve used in price calculation.
    uint64 initial_real_token_reserves = 4; // Real SPL-Token balance present at pool creation (for reference).
    uint64 token_total_supply = 5; // Total supply of the SPL-Token.
    uint64 fee_basis_points = 6; // Protocol fee charged on each trade (basis points, i.e. 1 bp = 0.01 %).
}

// One emitted trade (buy or sell) on a Pump.fun bonding curve.
message TradeEvent {
  // 32-byte SPL-Token mint address.
  bytes  mint                       = 1;

  // Lamports moved (positive on buys, negative on sells).
  uint64 sol_amount                 = 2;

  // Token amount moved (positive on buys, negative on sells).
  uint64 token_amount               = 3;

  // true = buy (SOL→SPL), false = sell.
  bool   is_buy                     = 4;

  // Trader’s wallet (32 bytes).
  bytes  user                       = 5;

  // Unix-epoch seconds.
  int64  timestamp                  = 6;

  uint64 virtual_sol_reserves       = 7;
  uint64 virtual_token_reserves     = 8;

  // TradeEventV1
  // Real reserves are the actual balances of the vaults.
  // They are used to calculate the current price of the bonding curve.
  // They are not used in the bonding curve calculations.
  // They are used for reference and to calculate the current price.
  optional uint64 real_sol_reserves          = 9;
  optional uint64 real_token_reserves        = 10;

  // TradeEventV2
  // Protocol-fee recipient (32 bytes).
  optional bytes  fee_recipient              = 11;
  optional uint64 fee_basis_points           = 12; // basis-points, 1 bp = 0.01 %
  optional uint64 fee                        = 13; // lamports

  // Pool creator wallet (32 bytes).
  optional bytes  creator                    = 14;
  optional uint64 creator_fee_basis_points   = 15;
  optional uint64 creator_fee                = 16; // lamports
}
