syntax = "proto3";

package raydium.amm.v1;

// -----------------------------------------------------------------------------
// Top-level containers
// -----------------------------------------------------------------------------
message Events {
  repeated Transaction transactions = 1;
}

message Transaction {
  bytes signature                   = 1;
  bytes fee_payer                   = 2;          // Fee-payer account address
  repeated bytes signers            = 3;          // Signers of the tx
  uint64 fee                        = 4;          // Lamports paid
  uint64 compute_units_consumed     = 5;          // CU used
  repeated Instruction instructions = 6;          // Executed instructions
  repeated Log logs                 = 7;          // Emitted logs
}

// -----------------------------------------------------------------------------
// Instruction + typed payloads
// -----------------------------------------------------------------------------
message Instruction {
  bytes  program_id = 1;
  uint32 stack_height = 2;
  oneof instruction {
    SwapBaseInInstruction swap_base_in = 3;
    SwapBaseOutInstruction swap_base_out = 4;
  }
}

message Log {
  bytes program_id = 1;
  uint32 invoke_depth = 2; // Call stack depth of the log
  oneof log {
    SwapBaseInLog swap_base_in     = 3; // AMM swap log
    SwapBaseOutLog swap_base_out   = 4; // AMM swap log
    // InitLog init                   = 5; // AMM initialization log
    // DepositLog deposit             = 6; // AMM deposit log
    // WithdrawLog withdraw           = 7; // AMM withdraw log
  }
}

message SwapAccounts {
  bytes token_program               = 1; // Token program (usually SPL Token)
  bytes amm_id                      = 2; // AMM pool account (Raydium V4 liquidity-state)
  bytes amm_authority               = 3; // AMM authority PDA
  bytes amm_open_orders             = 4; // AMM open-orders
  bytes pool_coin_token_account     = 5; // AMM target-orders
  bytes pool_pc_token_account       = 6; // AMM coin vault (base-token vault)
  bytes serum_program_id            = 7; // AMM pc vault (quote-token vault)
  bytes serum_market                = 8; // OpenBook (or Serum) DEX program
  bytes serum_bids                  = 9; // Market account
  bytes serum_asks                  = 10; // Market bids slab
  bytes serum_event_queue           = 11; // Market asks slab
  bytes serum_coin_vault_account    = 12; // Market event queue
  bytes serum_pc_vault              = 13; // Market pc vault (quote)
  bytes serum_vault_signer          = 14; // Market vault-signer PDA
  bytes user_source_token_account   = 15; // User source ATA (base token)
  bytes user_dest_token_account     = 16; // User destination ATA (quote token)
  bytes user_owner                  = 17; // User wallet (authority & fee-payer)
}

message SwapBaseInInstruction {
  SwapAccounts accounts = 1;
  uint64 amount_in = 2;
  uint64 minimum_amount_out = 3;
}

message SwapBaseOutInstruction {
  SwapAccounts accounts = 1;
  uint64 max_amount_in = 2;
  uint64 amount_out = 3;
}

message SwapBaseInLog {
  uint64 amount_in    = 1;
  uint64 minimum_out  = 2;
  uint64 direction    = 3;
  uint64 user_source  = 4;
  uint64 pool_coin    = 5;
  uint64 pool_pc      = 6;
  uint64 out_amount   = 7;
}

message SwapBaseOutLog {
  uint64 max_in       = 1;
  uint64 amount_out   = 2;
  uint64 direction    = 3;
  uint64 user_source  = 4;
  uint64 pool_coin    = 5;
  uint64 pool_pc      = 6;
  uint64 deduct_in    = 7;
}

message InitLog {
  uint32 pc_decimals   = 1;
  uint32 coin_decimals = 2;
  uint64 pc_lot_size   = 3;
  uint64 coin_lot_size = 4;
  uint64 pc_amount     = 5;
  uint64 coin_amount   = 6;
  bytes  market        = 7;   // 32-byte Pubkey
}

message DepositLog {
  uint64 max_coin    = 1;
  uint64 max_pc      = 2;
  uint64 base        = 3;
  uint64 pool_coin   = 4;
  uint64 pool_pc     = 5;
  uint64 pool_lp     = 6;
  string calc_pnl_x  = 7;     // UInt128 as decimal string
  string calc_pnl_y  = 8;     // UInt128 as decimal string
  uint64 deduct_coin = 9;
  uint64 deduct_pc   = 10;
  uint64 mint_lp     = 11;
}

message WithdrawLog {
  uint64 withdraw_lp = 1;
  uint64 user_lp     = 2;
  uint64 pool_coin   = 3;
  uint64 pool_pc     = 4;
  uint64 pool_lp     = 5;
  string calc_pnl_x  = 6;     // UInt128 as decimal string
  string calc_pnl_y  = 7;     // UInt128 as decimal string
  uint64 out_coin    = 8;
  uint64 out_pc      = 9;
}