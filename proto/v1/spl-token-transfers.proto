syntax = "proto3";

package solana.spl.token.transfers.v1;

message Events {
  repeated Transaction transactions = 1;
}

message Transaction {
    bytes signature = 1;
    bytes fee_payer = 2; // Fee payer account address.
    repeated bytes signers = 3; // Signers of the transaction.
    uint64 fee = 4; // Lamports paid for this instruction.
    uint64 compute_units_consumed = 5; // Compute units consumed by this instruction.
    repeated Instruction instructions = 6; // Instructions executed in this transaction.
}

message Instruction {
    bytes program_id = 1;
    uint32 stack_height = 2;
    bool is_root = 3; // Indicates if this instruction is a root instruction.
    oneof instruction {
        // https://github.com/solana-program/token-2022
        Transfer transfer = 10;
        Transfer mint = 11;
        Transfer burn = 12;
        InitializeMint initialize_mint = 13;
        InitializeAccount initialize_account = 14;
        Approve approve = 15;
        Revoke revoke = 16;
    }
}

message Transfer {
  // -- authority --
  bytes authority = 8;
  repeated bytes multisig_authority = 9;
  bytes source = 10;
  bytes destination = 11;
  uint64 amount = 12;
  // SPL-2022
  optional bytes mint = 13;
  optional uint32 decimals = 14; // uint8
}

message InitializeMint {
  // -- event --
  bytes mint = 10;
  bytes mint_authority = 11;
  optional bytes freeze_authority = 12;
  uint32 decimals = 13; // uint8
}

message InitializeAccount {
  // -- transaction --
  bytes tx_hash = 1;

  // -- ordering --
  uint32 execution_index = 2;
  uint32 instruction_index = 3;
  uint32 inner_instruction_index = 4;
  uint32 stack_height = 5; // instruction.stack_height()

  // -- instruction --
  bytes program_id = 6; // instruction.program_id()
  Instructions instruction = 7; // enum

  // -- event --
  bytes account = 10;
  bytes mint = 11;
  bytes owner = 12;
}

message Approve {
  // -- transaction --
  bytes tx_hash = 1;

  // -- ordering --
  uint32 execution_index = 2;
  uint32 instruction_index = 3;
  uint32 inner_instruction_index = 4;
  uint32 stack_height = 5; // instruction.stack_height()

  // -- instruction --
  bytes program_id = 6; // instruction.program_id()
  Instructions instruction = 7; // enum

  // -- authority --
  bytes authority = 8;
  repeated bytes multisig_authority = 9;

  // -- event --
  bytes source = 10;
  optional bytes mint = 11;
  bytes delegate = 12;
  bytes owner = 13;
  uint64 amount = 14;
  optional uint32 decimals = 15; // uint8
}

message Revoke {
  // -- transaction --
  bytes tx_hash = 1;

  // -- ordering --
  uint32 execution_index = 2;
  uint32 instruction_index = 3;
  uint32 inner_instruction_index = 4;
  uint32 stack_height = 5; // instruction.stack_height()

  // -- instruction --
  bytes program_id = 6; // instruction.program_id()
  Instructions instruction = 7; // enum

  // -- authority --
  bytes authority = 8;
  repeated bytes multisig_authority = 9;

  // -- event --
  bytes source = 10;
  bytes owner = 13;
}
