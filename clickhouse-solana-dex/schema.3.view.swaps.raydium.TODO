/* ──────────────────────────────────────────────────────────────────────────
   1.  Raydium-AMM → swaps  (canonical ordering)
   ────────────────────────────────────────────────────────────────────────── */
CREATE MATERIALIZED VIEW IF NOT EXISTS mv_raydium_amm_v4_swap_base_in
TO swaps AS
SELECT
    /* passthrough */
    block_num,
    block_hash,
    timestamp,
    transaction_index,
    instruction_index,
    signature,
    program_id,

    /* mapping – canonicalised */
    amm                         AS pool,
    user_source_owner           AS sender,

    /* canonical token addresses */
    if (user_token_source < user_token_destination, user_token_source, user_token_destination)       AS token0,
    if (user_token_source < user_token_destination, user_token_destination, user_token_source)       AS token1,

    /* amounts follow the same ordering */
    if (user_token_source < user_token_destination, s.amount_in, -toInt128(s.amount_out))    AS amount0,
    if (user_token_source < user_token_destination, -toInt128(s.amount_out), s.amount_in)    AS amount1,

    /* price must be inverted when the tokens were swapped */
    if (user_token_source < user_token_destination,
       toFloat64(s.amount_in) / s.amount_out,             -- original direction
       toFloat64(s.amount_out) / s.amount_in              -- inverted direction
    )                                                 AS price,

    /* constant */
    'raydium_amm_v4'                                  AS protocol
FROM raydium_amm_v4_swap_base_in AS s
-- ignore dust swaps (typically trying to disort the price)
WHERE s.amount_in > 1 AND s.amount_out > 1;
